Attribute VB_Name = "AutoNumber"
'------------------------------------------------------------------------------------------------------------
' Module        : AutoNumber - Автонумерация
' Author        : gtfox
' Date          : 2020.05.11
' Description   : Автонумерация/Перенумерация элементов схемы
' Link          : https://visio.getbb.ru/viewtopic.php?f=44&t=1491, https://yadi.sk/d/24V8ngEM_8KXyg
'------------------------------------------------------------------------------------------------------------







'Sub AutoNumEvent(vsoShapeEvent As Shape)
''------------------------------------------------------------------------------------------------------------
'' Macros        : AutoNumEvent - Автонумерация для одиночной вставки
'                'Когда происходит вставка применяется привязка к курсору
'                'В EventDrop должна быть формула =CALLTHIS("ThisDocument.AutoNumEvent")
'                'Этот макрос расположен в ThisDocument
''------------------------------------------------------------------------------------------------------------
'    Set vsoWindowEvent = ActiveWindow
'    Set vsoShapePaste = vsoShapeEvent
'    Click = False
'    AutoNum vsoShapePaste
'End Sub

Public Sub AutoNum(vsoShape As Visio.Shape)
'------------------------------------------------------------------------------------------------------------
' Macros        : AutoNum - Автонумерация элементов при вбросе/копировании
                'Нумерация всегда продолжается с максимального значения нумерации существующих элементов
                'Если, в начале схемы был удален элемент, его номер больше не появится
                'Для лотания дыр в нумерации используйте перенумерацию элементов ReNumber()
                
                'Когда происходит массовая вставка не применяется привязка к курсору
                'В EventMultiDrop должна быть формула = CALLTHIS("AutoNumber.AutoNum", "SAPR_ASU")
'------------------------------------------------------------------------------------------------------------

    Dim SymName As String       'Буквенная часть нумерации
    Dim NomerShemy As Integer   'Нумерация элементов идет в пределах одной схемы (одного номера схемы)
    Dim UserType As Integer     'Тип элемента схемы: клемма, провод, реле
    Dim LastNumber As Integer   'Максимальное значение нумерации существующих элементов. Это не общее число элементов, а макс цифра в обозначении.

'    Dim TheDoc As Visio.Shape
'    Set TheDoc = Application.ActiveDocument.DocumentSheet
    
    Dim ThePage As Visio.Shape
    Set ThePage = ActivePage.PageSheet
    
    Dim vsoShapeOnPage As Visio.Shape

    Dim vsoPage As Visio.Page
    Dim PageName As String
    PageName = "Схема"  'Имена листов где возможна нумерация
    If ThePage.CellExists("Prop.NomerShemy", 0) Then NomerShemy = ThePage.Cells("Prop.NomerShemy").Result(0)    'Номер схемы. Если одна схема на весь проект, то на всех листах должен быть один номер. По умолчанию = 1
    
    'Узнаем тип и буквенное обозначение элемента, который вставили на схему
    If vsoShape.CellExists("User.Type", 0) Then UserType = vsoShape.Cells("User.Type").Result(0)
    If vsoShape.CellExists("Prop.SymName", 0) Then SymName = vsoShape.Cells("Prop.SymName").ResultStr(0)

    'Цикл поиска максимального номера существующих элементов схемы
    For Each vsoPage In ActiveDocument.Pages    'Перебираем все листы в активном документе
        If InStr(1, vsoPage.Name, PageName) > 0 Then    'Берем те, что содержат "Схема" в имени
            If vsoPage.PageSheet.Cells("Prop.NomerShemy").Result(0) = NomerShemy Then    'Берем все схемы с номером той, на которую вставляем элемент
                For Each vsoShapeOnPage In vsoPage.Shapes    'Перебираем все шейпы в найденных листах
                    If vsoShapeOnPage.CellExists("User.Type", 0) Then   'Если в шейпе есть тип, то -
                        If vsoShapeOnPage.Cells("User.Type").Result(0) = UserType Then    '- проверяем чтобы совпадал с нашим (который вставили)
                            If (vsoShapeOnPage.Cells("Prop.SymName").ResultStr(0) = SymName) And (vsoShapeOnPage.NameID <> vsoShape.NameID) Then 'Буквы совпадают и это не тот же шейп который вставили
                                If vsoShapeOnPage.Cells("Prop.AutoNum").Result(0) = 1 Then    'Отсеиваем шейпы нумеруемые вручную
                                    Select Case UserType
                                        Case 3 'Клеммы
                                            If vsoShapeOnPage.Cells("Prop.NumberKlemmnik").Result(0) = vsoShape.Cells("Prop.NumberKlemmnik").Result(0) Then 'Выбираем клеммы из одного клеммника
                                                If vsoShapeOnPage.Cells("Prop.Number").Result(0) > LastNumber Then    'Ищем максимальное значение номера элемента
                                                    LastNumber = vsoShapeOnPage.Cells("Prop.Number").Result(0)    'Запоменаем. А те что меньше сюда не попадут
                                                End If
                                            End If
                                        Case Else 'Остальные элементы
                                            If vsoShapeOnPage.Cells("Prop.Number").Result(0) > LastNumber Then    'Ищем максимальное значение номера элемента
                                                LastNumber = vsoShapeOnPage.Cells("Prop.Number").Result(0)    'Запоменаем. А те что меньше сюда не попадут
                                            End If
                                    End Select
                                End If
                            End If
                        End If
                    End If
                Next
            End If
        End If
    Next

    'Во вставленный элемент заносим максимальный найденный номер + 1
    vsoShape.Cells("Prop.Number").FormulaU = LastNumber + 1
    
    'Если это реле то чистим старые ссылки
    If vsoShape.Cells("User.Type").Result(0) = typeCoil Then
        For i = 1 To vsoShape.Section(visSectionScratch).Count
            'Чистим шейп
            vsoShape.CellsU("Scratch.A" & i).FormulaU = """""" 'Пишем в ShapeSheet пустые кавычки. Если записать пустую строку, то будет NoFormula и нумерация контактов сломается
            vsoShape.CellsU("Scratch.C" & i).FormulaU = ""
            vsoShape.CellsU("Scratch.D" & i).FormulaU = ""
        Next
    End If
    
    'Активация событий. Они чета сомодезактивируются xD
    Set ActivePages = ActiveDocument.Pages
    
End Sub



Public Sub ReNumber()
'------------------------------------------------------------------------------------------------------------
' Macros        : ReNumber - Перенумерация элементов

                'Перенумерация происходит слева направо, сверху вниз
                'независимо от порядка появления элементов на схеме
                'и независимо от их номеров до перенумерации.
                'Если в элементе Prop.AutoNum=0 то он не участвует в перенумерации
                'Перенумерация элементов идет в пределах одной схемы (одного номера схемы)
'------------------------------------------------------------------------------------------------------------
    Dim shpElement As Shape
    Dim Prev As Shape
    Dim shpСol As Collection
    Set shpСol = New Collection
    Dim shpMas() As Shape
    Dim shpTemp As Shape
    Dim ss As String
    Dim i As Integer, ii As Integer, j As Integer, n As Integer
    
    'Собираем в коллекцию нужные для сортировки шейпы
    For Each shpElement In ActivePage.Shapes
        If shpElement.CellExists("User.Type", False) Then
            If shpElement.Cells("User.Type").Result(0) = typeCoil Then
                shpСol.Add shpElement
                'Debug.Print shpElement.Cells("PinX").Result("mm") & " - " & shpElement.Cells("PinY").Result("mm")
            End If
        End If
    Next
    
    'из коллекции передаем их в массив для сортировки
    ReDim shpMas(shpСol.Count - 1)
    i = 0
    For Each shpElement In shpСol
        Set shpMas(i) = shpElement
        i = i + 1
    Next

    ' "Сортировка вставками" массива шепов по возрастанию коордонаты Х
    UbMas = UBound(shpMas)
    For j = 1 To UbMas
        Set shpTemp = shpMas(j)
        i = j
        While shpMas(i - 1).Cells("PinX").Result("mm") > shpTemp.Cells("PinX").Result("mm") '>:возрастание, <:убывание
            Set shpMas(i) = shpMas(i - 1)
            i = i - 1
            If i <= 0 Then GoTo ExitWhileX
        Wend
ExitWhileX:  Set shpMas(i) = shpTemp
    Next

'    Debug.Print "---"
'    For i = 0 To UbMas
'        Debug.Print shpMas(i).Cells("PinX").Result("mm") & " - " & shpMas(i).Cells("PinY").Result("mm")
'    Next
    
    'Находим шейпы с одинаковой координатой Х и сортируем Y-ки
    'Debug.Print "---"
    Group = False
    Set shpСol = New Collection
    For ii = 1 To UbMas
        If (Abs(shpMas(ii - 1).Cells("PinX").Result("mm") - shpMas(ii).Cells("PinX").Result("mm")) < 0.5) And (ii < UbMas) Then
            'shpСol.Add shpMas(i)
            If Group = False Then
                StartIndex = ii - 1 'На первом элементе запоменаем его номер
                Group = True    'Начали собирать одинакое координаты
            End If
            'Debug.Print shpMas(i).Cells("PinX").Result("mm") & " - " & shpMas(i).Cells("PinY").Result("mm")
        ElseIf Group Then
            'shpСol.Add shpMas(i)
            Group = False   'Попался первый не одинаковый. Закончили.
            EndIndex = ii - 1
            If (ii = UbMas) And (Abs(shpMas(ii - 1).Cells("PinX").Result("mm") - shpMas(ii).Cells("PinX").Result("mm")) < 0.5) Then EndIndex = ii 'Если последний элемент, то включаем его в сортировку
           'Debug.Print shpMas(i).Cells("PinX").Result("mm") & " - " & shpMas(i).Cells("PinY").Result("mm")

            '--V--Сортируем по убыванию коордонаты Y
            For j = StartIndex + 1 To EndIndex
                Set shpTemp = shpMas(j)
                i = j
                While shpMas(i - 1).Cells("PinY").Result("mm") < shpTemp.Cells("PinY").Result("mm") '>:возрастание, <:убывание
                    Set shpMas(i) = shpMas(i - 1)
                    i = i - 1
                    If i <= StartIndex Then GoTo ExitWhileY
                Wend
ExitWhileY:     Set shpMas(i) = shpTemp
            Next
            '--Х--Сортировка по убыванию коордонаты Y
        End If
    Next
    Set shpСol = Nothing
    
    'Перенумеровываем отсортированный массив
    For i = 0 To UbMas
        shpMas(i).Text = "KL" & (i + 1)
    Next

'    Debug.Print "---"
'    For i = 0 To UbMas
'        Debug.Print shpMas(i).Cells("PinX").Result("mm") & " - " & shpMas(i).Cells("PinY").Result("mm")
'    Next

    'Активация событий. Они чета сомодезактивируются xD
    Set ActivePages = ActiveDocument.Pages
    
End Sub


Private Sub NomerShemyAdd()

    Dim ThePage As Visio.Shape


    Dim vsoPage As Visio.Page
    Dim PageName As String
    PageName = "Схема"
    
    For Each vsoPage In ActiveDocument.Pages
        If InStr(1, vsoPage.Name, PageName) > 0 Then
            Set ThePage = vsoPage.PageSheet
            If Not ThePage.CellExists("Prop.NomerShemy", 0) Then
                'Prop
                ThePage.AddRow visSectionProp, visRowLast, visTagDefault
                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsValue).RowNameU = "NomerShemy"
                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsLabel).FormulaForceU = """Номер схемы"""
                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsPrompt).FormulaForceU = """Нумерация элементов идет в пределах одной схемы"""
                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsType).FormulaForceU = "2"
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsFormat).FormulaForceU = """"""
                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsValue).FormulaForceU = "1"
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsSortKey).FormulaForceU = """"""
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsInvis).FormulaForceU = "FALSE"
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsAsk).FormulaForceU = "FALSE"
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsLangID).FormulaForceU = "1033"
'                ThePage.CellsSRC(visSectionProp, visRowLast, visCustPropsCalendar).FormulaForceU = "0"
            
'-------------------------------------------------------------------------------------------------------------
                'User
'                ThePage.AddRow visSectionUser, visRowLast, visTagDefault
'                ThePage.CellsSRC(visSectionUser, visRowLast, visUserValue).RowNameU = "QF"
'                ThePage.CellsSRC(visSectionUser, visRowLast, visUserValue).FormulaU = 88
'                ThePage.CellsSRC(visSectionUser, visRowLast, visUserPrompt).FormulaU = """qqq"""
            End If
        End If
    Next

End Sub



''' запись значения списка в ячейки user-defined документа '''
Public Sub EditListValue(nameCell As String, numValue As Integer, newValue)
' 1 аргумент - имя ячейки для изменения
' 2 аргумент - номер значения для поиска в списке значений (начиная с 1)
' 3 аргумент - новое значение для замены
Dim arrList
Dim docSheet As Visio.Shape
Dim visDoc As Visio.Document
Set visDoc = Application.ActiveDocument
Set docSheet = visDoc.DocumentSheet

With docSheet.Cells(nameCell)
     arrList = Split(.FormulaU, ";")  ' создаем массив значений из формулы
     arrList(numValue - 1) = newValue ' меняем одно из значений
     .FormulaU = Join(arrList, ";")   ' создаем строку из значений массива и записываем назад в ячейку
End With

End Sub

''' чтение значения списка из ячейки user-defined документа '''
Public Function ReadListValue(nameCell As String, numValue As Integer)
' 1 аргумент - имя ячейки для чтения
' 2 аргумент - номер значения для поиска в списке значений (начиная с 1)
Dim arrList
Dim docSheet As Visio.Shape
Dim visDoc As Visio.Document
Set visDoc = Application.ActiveDocument
Set docSheet = visDoc.DocumentSheet

With docSheet.Cells(nameCell)
    arrList = Split(.FormulaU, ";")       ' создаем массив значений из формулы
    ReadListValue = arrList(numValue - 1) ' извлекаем значение
End With

End Function

Function ExtractOboz(Oboz) ' Функция определения неизменяемой части обозначения

Dim ObozF As String, i As Integer, Flag As Boolean
Flag = Oboz Like "*[-.,/\]*"

For i = 1 To Len(Oboz)
    If Not Flag And Mid(Oboz, i, 1) Like "[a-zA-Zа-яА-Я ]" Then GoSub AddChar
    If Flag And Mid(Oboz, i, 1) Like "[a-zA-Zа-яА-Я0-9 ]" Then GoSub AddChar
    If Flag And Mid(Oboz, i, 1) Like "[-.,/\]" Then GoSub AddChar
Next
    
ExtractOboz = ObozF
Exit Function

AddChar:
    ObozF = ObozF + Mid(Oboz, i, 1)
Return
End Function ' ***************************** AutoNum *************************


